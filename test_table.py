# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\test_table.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDataStream, Qt
from PyQt5.QtWidgets import QListWidgetItem, QTableWidgetItem 
from matplotlib.pyplot import text
from DataManipulate import data_manipulate

class DimensionList(QtWidgets.QListWidget):
    def __init__(self, main, parent):
        super(DimensionList, self).__init__(parent)
        self.dt = main.dt
        self.main = main

    def dragLeaveEvent(self, e: QtGui.QDragLeaveEvent) -> None:
        if self.count():
            self.takeItem(self.currentRow())
            self.main.tableWidget.make_table()

    def readData(self, mime: QtCore.QMimeData) -> list:
        stream = QDataStream(mime.data('application/x-qabstractitemmodeldatalist'))
        textList = []
        while not stream.atEnd():
            # we're not using row and columns, but we *must* read them
            row = stream.readInt()
            col = stream.readInt()
            for dataSize in range(stream.readInt()):
                role, value = stream.readInt(), stream.readQVariant()
                if role == Qt.DisplayRole:
                    textList.append(value)
        return textList
    
    def dragEnterEvent(self, e: QtGui.QDragEnterEvent) -> None:
        col = self.readData(e.mimeData())[0]
        if self.dt.is_dimension(col):
            e.accept()
        else:
            e.ignore()

    def dropEvent(self, event: QtGui.QDropEvent) -> None:
        col = self.readData(event.mimeData())[0]
        super().dropEvent(event)
        self.main.tableWidget.make_table()

class MeasureList(QtWidgets.QListWidget):
    def __init__(self, main, parent):
        super(MeasureList, self).__init__(parent)
        self.dt = main.dt
        self.main = main

    def dragLeaveEvent(self, e: QtGui.QDragLeaveEvent) -> None:
        if self.count():
            self.takeItem(self.currentRow())
            self.main.tableWidget.make_table()

    def readData(self, mime: QtCore.QMimeData) -> list:
        stream = QDataStream(mime.data('application/x-qabstractitemmodeldatalist'))
        textList = []
        while not stream.atEnd():
            # we're not using row and columns, but we *must* read them
            row = stream.readInt()
            col = stream.readInt()
            for dataSize in range(stream.readInt()):
                role, value = stream.readInt(), stream.readQVariant()
                if role == Qt.DisplayRole:
                    textList.append(value)
        return textList
    
    def isExist(self, s):
        for i in range(self.count()):
            if s.split('.')[0] == self.item(i).text().split('.')[0]:
                return True
        return False
    
    def dragEnterEvent(self, e: QtGui.QDragEnterEvent) -> None:
        col = self.readData(e.mimeData())[0]
        val = col.split('.')[0]
        if self.dt.is_measure(val):
            e.accept()
        else:
            e.ignore()
    
    def dropEvent(self, event: QtGui.QDropEvent) -> None:
        # super().dropEvent(event)
        col = self.readData(event.mimeData())[0]+".sum"
        if self.isExist(col):
            return
        item = QListWidgetItem()
        item.setText(col)
        self.addItem(item)
        self.main.tableWidget.make_table()

class TableGroupby(QtWidgets.QTableWidget):
    def __init__(self, main, parent):
        super(TableGroupby, self).__init__(parent)
        self.main = main
        self.dt = main.dt
        self.dimension = []
        self.measure = {}

    def make_table(self):
        self.setColumnCount(0)
        self.setRowCount(0)
        self.dimension = self.get_widget_item(self.main.DimensionList)
        self.measure_raw = self.get_widget_item(self.main.MeasureList)
        self.measure = self.to_measure_dict(self.measure_raw)
        if not(len(self.dimension) > 0 ):
            self.main.MeasureList.clear()
            return
        self.data_groupby = self.dt.get_groupby(self.dimension, self.measure)
        self.header = self.data_groupby['col']
        self.data = self.data_groupby['data']
        self.setColumnCount(len(self.header))
        self.setRowCount(len(self.data))
        self.setHorizontalHeaderLabels(self.header)
        for row in range(len(self.data)):
            for col, item in enumerate(self.data[row]):
                if type(item) in (int, float):
                    newItem = QTableWidgetItem()
                    newItem.setData(QtCore.Qt.DisplayRole, item)
                else:
                    newItem = QTableWidgetItem(str(item))
                self.setItem(row, col, newItem)
    
    def get_widget_item(self, widget:QtWidgets.QListWidget) -> list :
        return [widget.item(i).text() for i in range(widget.count())]
    
    def to_measure_dict(self, measure: list):
        result = {}
        for i in measure:
            col = i.split('.')
            result[col[0]] = col[1]
        return result

    def add_listbox(self, e):
        col = self.readData(e.mimeData())[0]
        if self.dt.is_measure(col) and len(self.dimension) > 0:
            self.measure[col] = 'sum'
            col = col+'.sum'
            item = QListWidgetItem()
            item.setText(col)
            item.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDropEnabled|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
            self.main.MeasureList.addItem(item)
            e.accept()
        elif self.dt.is_dimension(col):
            self.dimension.append(col)
            self.main.DimensionList.addItem(col)
            e.accept()
    
    def dropEvent(self, event: QtGui.QDropEvent) -> None:
        self.add_listbox(event)
        if len(self.dimension) >0:
            self.make_table()

    def readData(self, mime: QtCore.QMimeData) -> list:
        stream = QDataStream(mime.data('application/x-qabstractitemmodeldatalist'))
        textList = []
        while not stream.atEnd():
            # we're not using row and columns, but we *must* read them
            row = stream.readInt()
            col = stream.readInt()
            for dataSize in range(stream.readInt()):
                role, value = stream.readInt(), stream.readQVariant()
                if role == Qt.DisplayRole:
                    textList.append(value)
        return textList



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.dt = data_manipulate()

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1122, 661)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.DimensionWidget = QtWidgets.QListWidget(self.centralwidget)
        self.DimensionWidget.setGeometry(QtCore.QRect(40, 50, 241, 251))
        self.DimensionWidget.setDragEnabled(True)
        self.DimensionWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)
        self.DimensionWidget.setObjectName("DimensionWidget")
        self.MeasureWidget = QtWidgets.QListWidget(self.centralwidget)
        self.MeasureWidget.setGeometry(QtCore.QRect(40, 330, 241, 251))
        self.MeasureWidget.setDragEnabled(True)
        self.MeasureWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)
        self.MeasureWidget.setObjectName("MeasureWidget")
        self.DimensionList = DimensionList(self, self.centralwidget)
        self.DimensionList.setGeometry(QtCore.QRect(440, 60, 651, 41))
        self.DimensionList.setAcceptDrops(True)
        self.DimensionList.setDragEnabled(True)
        self.DimensionList.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.DimensionList.setDefaultDropAction(QtCore.Qt.MoveAction)
        self.DimensionList.setFlow(QtWidgets.QListView.LeftToRight)
        self.DimensionList.setObjectName("DimensionList")
        self.MeasureList = MeasureList(self, self.centralwidget)
        self.MeasureList.setGeometry(QtCore.QRect(440, 110, 651, 41))
        self.MeasureList.setAcceptDrops(True)
        self.MeasureList.setDragEnabled(True)
        self.MeasureList.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.MeasureList.setDefaultDropAction(QtCore.Qt.MoveAction)
        self.MeasureList.setFlow(QtWidgets.QListView.LeftToRight)
        self.MeasureList.setObjectName("MeasureList")
        self.tableWidget = TableGroupby(self, self.centralwidget)
        self.tableWidget.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.tableWidget.setGeometry(QtCore.QRect(440, 230, 641, 351))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setAcceptDrops(True)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(370, 70, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(370, 120, 47, 13))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1122, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)



        self.dt.load_data('Superstore.csv')
        self.dt.separated_dimension_measure()
        dimension = self.dt.get_dimension()
        measure = self.dt.get_measure()
        for i in dimension:
            item = QListWidgetItem(i)
            self.DimensionWidget.addItem(item)
        for i in measure:
            item = QListWidgetItem(i)
            self.MeasureWidget.addItem(item)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        __sortingEnabled = self.DimensionWidget.isSortingEnabled()
        self.DimensionWidget.setSortingEnabled(False)
        self.DimensionWidget.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(True)
        self.label.setText(_translate("MainWindow", "dimesion"))
        self.label_2.setText(_translate("MainWindow", "measure"))
        self.MeasureList.itemChanged.connect(lambda: self.tableWidget.make_table())


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
